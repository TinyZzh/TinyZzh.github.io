<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TinyZ&#39;s Blog</title>
    <description>专注于网络游戏前后端技术(JAVA, PHP, Unity3D)。积累技术,记录分享。</description>
    <link>https://github.com/TinyZzh//</link>
    <atom:link href="https://github.com/TinyZzh//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>2016-04-12</pubDate>
    <lastBuildDate>2016-04-12</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Netty4.x中文教程系列(七) UDP协议</title>
        <description>&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;
&lt;p&gt;　　将近快一年时间没有更新Netty的博客。一方面原因是因为项目进度的问题。另外一方面是博主有一段时间去熟悉Unity3D引擎。&lt;/p&gt;
&lt;p&gt;　　本章节主要记录博主自己Netty的UDP协议使用。&lt;/p&gt;
&lt;h2&gt;　　1.　　构建UDP服务端&lt;/h2&gt;
&lt;p&gt;　　首先我们应该清楚UDP协议是一种无连接状态的协议。所以Netty框架区别于一般的有链接协议服务端启动程序（ServerBootstrap）。&lt;/p&gt;
&lt;p&gt;　　Netty开发基于UDP协议的服务端需要使用Bootstrap&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show(&#39;848a7592-339a-4f5e-a73e-1a2031503b75&#39;)&quot;&gt;&lt;img id=&quot;code_img_closed_848a7592-339a-4f5e-a73e-1a2031503b75&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot; /&gt;&lt;img id=&quot;code_img_opened_848a7592-339a-4f5e-a73e-1a2031503b75&quot; class=&quot;code_img_opened&quot; style=&quot;display: none;&quot; onclick=&quot;cnblogs_code_hide(&#39;848a7592-339a-4f5e-a73e-1a2031503b75&#39;,event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div id=&quot;cnblogs_code_open_848a7592-339a-4f5e-a73e-1a2031503b75&quot; class=&quot;cnblogs_code_hide&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; dev.tinyz.game;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.buffer.Unpooled;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt; io.netty.channel.*&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.DatagramPacket;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioDatagramChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.MessageToMessageDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetSocketAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.nio.charset.Charset;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.util.List;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@author&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; TinyZ on 2015/6/8.
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; GameMain {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; NioEventLoopGroup nioEventLoopGroup = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         Bootstrap bootstrap = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         bootstrap.channel(NioDatagramChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        bootstrap.group(nioEventLoopGroup);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         bootstrap.handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;NioDatagramChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(NioDatagramChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;                 ChannelPipeline cp =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 cp.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; MessageToMessageDecoder&amp;lt;DatagramPacket&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; decode(ChannelHandlerContext ctx, DatagramPacket msg, List&amp;lt;Object&amp;gt; out) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt;                         out.add(msg.content().toString(Charset.forName(&quot;UTF-8&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt;                 }).addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; UdpHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        });
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听端口&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;         ChannelFuture sync = bootstrap.bind(9009&lt;span style=&quot;color: #000000;&quot;&gt;).sync();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt;         Channel udpChannel =&lt;span style=&quot;color: #000000;&quot;&gt; sync.channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;        String data = &quot;我是大好人啊&quot;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;        udpChannel.writeAndFlush(new DatagramPacket(Unpooled.copiedBuffer(data.getBytes(Charset.forName(&quot;UTF-8&quot;))), new InetSocketAddress(&quot;192.168.2.29&quot;, 9008)));&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt;         Runtime.getRuntime().addShutdownHook(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Thread(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Runnable() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;54&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; run() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;55&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                nioEventLoopGroup.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;56&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;57&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;58&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;59&lt;/span&gt; }&lt;/pre&gt;
    &lt;/div&gt;
    &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　于Tcp协议的客户端启动程序基本一样。唯一区别就在于，UDP服务器使用的是bind方法，来监听端口&lt;/p&gt;
&lt;p&gt;　　在Netty的Bootstrap类中的注释，发现有如下注释内容：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images0.cnblogs.com/blog2015/359548/201506/102039066766793.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;　　大意就是：bind()用于UDP， TCP连接使用connect()。&lt;/p&gt;
&lt;p&gt;　　上面的源码监听的是端口9009，那么所有使用UDP协议的数据，发送到端口9009，就会被我们的Netty接收到了。&lt;/p&gt;
&lt;p&gt;　　为了输出方便，博主在上面的代码中增加一个MessageToMessageDecoder将接收到的Datagram，排除其他信息，仅将字符串传递下去。并在UDPHandler中打印出来。&lt;/p&gt;
&lt;h2&gt;　　2.　　构建UDP客户端&lt;/h2&gt;
&lt;p&gt;　　UDP协议来说，其实没有客户端和服务端的区别啦。只是为了贴近TCP协议做的一点文字描述上面的区分。&lt;/p&gt;
&lt;p&gt;　　简单来讲，上面的那段逻辑其实就可以作为UDP客户端来使用。注释掉的那行逻辑其实就是发送&amp;ldquo;我是大好人啊&amp;rdquo;这个字符串到ip地址为192.168.2.29的服务端的9008端口。代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show(&#39;4210e2fa-cc56-4728-8980-dfb43e870f6f&#39;)&quot;&gt;&lt;img id=&quot;code_img_closed_4210e2fa-cc56-4728-8980-dfb43e870f6f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot; /&gt;&lt;img id=&quot;code_img_opened_4210e2fa-cc56-4728-8980-dfb43e870f6f&quot; class=&quot;code_img_opened&quot; style=&quot;display: none;&quot; onclick=&quot;cnblogs_code_hide(&#39;4210e2fa-cc56-4728-8980-dfb43e870f6f&#39;,event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div id=&quot;cnblogs_code_open_4210e2fa-cc56-4728-8980-dfb43e870f6f&quot; class=&quot;cnblogs_code_hide&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; dev.tinyz.game;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.buffer.Unpooled;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt; io.netty.channel.*&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.DatagramPacket;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioDatagramChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.MessageToMessageDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetSocketAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.nio.charset.Charset;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.util.List;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@author&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; TinyZ on 2015/6/8.
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; GameMain {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; NioEventLoopGroup nioEventLoopGroup = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         Bootstrap bootstrap = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         bootstrap.channel(NioDatagramChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        bootstrap.group(nioEventLoopGroup);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         bootstrap.handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;NioDatagramChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(NioDatagramChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;                 ChannelPipeline cp =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 cp.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; MessageToMessageDecoder&amp;lt;DatagramPacket&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; decode(ChannelHandlerContext ctx, DatagramPacket msg, List&amp;lt;Object&amp;gt; out) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt;                         out.add(msg.content().toString(Charset.forName(&quot;UTF-8&quot;&lt;span style=&quot;color: #000000;&quot;&gt;)));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt;                 }).addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; UdpHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        });
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听端口&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;         ChannelFuture sync = bootstrap.bind(0&lt;span style=&quot;color: #000000;&quot;&gt;).sync();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt;         Channel udpChannel =&lt;span style=&quot;color: #000000;&quot;&gt; sync.channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;         String data = &quot;我是大好人啊&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt;         udpChannel.writeAndFlush(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DatagramPacket(Unpooled.copiedBuffer(data.getBytes(Charset.forName(&quot;UTF-8&quot;))), &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; InetSocketAddress(&quot;192.168.2.29&quot;, 9008&lt;span style=&quot;color: #000000;&quot;&gt;)));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt;         Runtime.getRuntime().addShutdownHook(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; Thread(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Runnable() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;54&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; run() {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;55&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                nioEventLoopGroup.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;56&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;57&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;58&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;59&lt;/span&gt; }&lt;/pre&gt;
    &lt;/div&gt;
    &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　和上面的&amp;ldquo;服务端&amp;rdquo;代码最大的差别就是，&lt;strong&gt;监听的端口号修改成0.&lt;/strong&gt;为&lt;/p&gt;
&lt;p&gt;　　使用Netty的Channel发送DatagramPacket。写好目标地址，然后运行起来就可以自己测试一下了。&lt;/p&gt;
&lt;h2&gt;　　3.　　JAVA原生UDP&lt;/h2&gt;
&lt;p&gt;　　有朋友这个时候就会问：为什么不是有JAVA原生的UDP呢？&lt;/p&gt;
&lt;p&gt;　　其实很简单。说白了Netty使用的也是Java底层的代码。只是做了一层封装，以便于使用。服务端使用Netty框架构建高性能，高扩展的UDP服务器。&lt;/p&gt;
&lt;p&gt;　　客户端则使用JAVA或者任意其他的语言的API（遵循UDP协议即可）。&lt;/p&gt;
&lt;p&gt;　　下面上一段博主使用的的JAVA&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show(&#39;bc878d64-6d80-47f2-a713-211c09b9962d&#39;)&quot;&gt;&lt;img id=&quot;code_img_closed_bc878d64-6d80-47f2-a713-211c09b9962d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot; /&gt;&lt;img id=&quot;code_img_opened_bc878d64-6d80-47f2-a713-211c09b9962d&quot; class=&quot;code_img_opened&quot; style=&quot;display: none;&quot; onclick=&quot;cnblogs_code_hide(&#39;bc878d64-6d80-47f2-a713-211c09b9962d&#39;,event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot; /&gt;
    &lt;div id=&quot;cnblogs_code_open_bc878d64-6d80-47f2-a713-211c09b9962d&quot; class=&quot;cnblogs_code_hide&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; dev.tinyz.game;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.IOException;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.DatagramPacket;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.DatagramSocket;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetSocketAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.nio.charset.Charset;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@author&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; TinyZ on 2015/6/10.
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;  &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; UdpTest {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; IOException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; String data = &quot;博主邮箱:zou90512@126.com&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;byte&lt;/span&gt;[] bytes = data.getBytes(Charset.forName(&quot;UTF-8&quot;&lt;span style=&quot;color: #000000;&quot;&gt;));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         InetSocketAddress targetHost = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; InetSocketAddress(&quot;192.168.2.29&quot;, 9009&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 发送udp内容&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         DatagramSocket socket = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; DatagramSocket();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         socket.send(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DatagramPacket(bytes, 0&lt;span style=&quot;color: #000000;&quot;&gt;, bytes.length, targetHost));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; }&lt;/pre&gt;
    &lt;/div&gt;
    &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　..&lt;/p&gt;
&lt;p&gt;　　ps.UDP协议最大特点就是效率高，速度快。用于某些场合可以极大改善系统的性能。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2015-06-10</pubDate>
        <link>https://github.com/TinyZzh//netty/2015/06/10/Netty4.x_7.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2015/06/10/Netty4.x_7.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(六) 从头开始Bootstrap</title>
        <description>&lt;p&gt;　　在中国程序界。我们都是学着Hello World !慢慢成长起来的。逐渐从一无所知到熟悉精通的。&lt;/p&gt;
&lt;p&gt;　　第二章就从Hello World 开始讲述Netty的中文教程。&lt;/p&gt;
&lt;p&gt;　　首先创建一个Java项目。引入一个Netty 框架的包。这个步骤我在本系列教程的后面就不在重复了。&lt;/p&gt;
&lt;p&gt;　　先上一张我示例的项目工程图给大家看一下:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171451-184e0b3b4ce745de81d773c097243960.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;1.下载并为项目添加Netty框架&lt;/h2&gt;
&lt;p&gt;　　Netty的包大家可以从Netty官网:&lt;a href=&quot;http://netty.io/downloads.html&quot; target=&quot;_blank&quot;&gt;http://netty.io/downloads.html&lt;/a&gt;&amp;nbsp;下载&lt;/p&gt;
&lt;p&gt;　　&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171717-5926ec582cab4167b6aca539d8c8adff.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示: Netty提供了三个主要版本的框架包给大家下载。&lt;/p&gt;
&lt;p&gt;3.9版本Final 说明这个版本是3.x版本中最新的版本。final意味着功能不再继续添加更新。仅为修改bug等提供继续的更新。&lt;/p&gt;
&lt;p&gt;5.x版本由于是开始。不能排除是否稳定运行等问题。加上5.x在4.x的版本上略微修改的。在5.x稳定之前。不推荐大家学习使用。&lt;/p&gt;
&lt;p&gt;本教程是基于Netty4.x版本的。&lt;/p&gt;
&lt;p&gt;　　笔者也是从3.6版本，经过了相当痛苦的一段时间才算是真正的过度到4.x版本。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26172210-783e94446ac0417fab5493bb6dcdf526.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;　　下载之后解压缩。大家可以看到这样一个目录结构。非常的清晰。&lt;/p&gt;
&lt;p&gt;　　第一个文件夹jar是jar包的文件夹。第二个javadoc是API文档。第三个license文件夹是开源的授权文件(可以直接无视)。&lt;/p&gt;
&lt;p&gt;　　javadoc文件夹下面是一个jar包。可以直接解压缩出来。解压缩之后的文件夹就是api文档(以网页的形势展现)。&lt;/p&gt;
&lt;p&gt;　　jar文件夹里面有很多的jar包和一个all-in-one文件夹。都是Netty框架的组成部分。all-in-one里面有两个文件一个是jar包，另一个是对应的source源代码包。这样做的目的是为了给程序员有选择的添加自己所需要的包。&lt;/p&gt;
&lt;p&gt;　　假如读者是初学者的话。推荐直接套用all-in-one里面的jar包。假如你熟悉Netty的话可以根据自己的项目需求添加不同的jar包。&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;2.创建Server 服务端&lt;/h2&gt;
&lt;p&gt;　　Netty创建全部都是实现自&lt;a title=&quot;class in io.netty.bootstrap&quot; href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/AbstractBootstrap.html&quot; target=&quot;classFrame&quot;&gt;AbstractBootstrap&lt;/a&gt;。客户端的是Bootstrap，服务端的则是ServerBootstrap。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.1创建一个 HelloServer &lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;


&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.ServerBootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelFuture;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioServerSocketChannel;

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServer {

    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
     * 服务端监听的端口地址
     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; portNumber = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
        EventLoopGroup bossGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        EventLoopGroup workerGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            ServerBootstrap b &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ServerBootstrap();
            b.group(bossGroup, workerGroup);
            b.channel(NioServerSocketChannel.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
            b.childHandler(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerInitializer());

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 服务器绑定端口监听&lt;/span&gt;
            ChannelFuture f =&lt;span style=&quot;color: #000000;&quot;&gt; b.bind(portNumber).sync();
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听服务器关闭监听&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;            f.channel().closeFuture().sync();

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 可以简写为&lt;/span&gt;
            &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; b.bind(portNumber).sync().channel().closeFuture().sync(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　EventLoopGroup 是在4.x版本中提出来的一个新概念。用于channel的管理。服务端需要两个。和3.x版本一样，一个是boss线程一个是worker线程。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span&gt;　&lt;span style=&quot;color: #c0c0c0;&quot;&gt;　b.childHandler(&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;new HelloServerInitializer());　　　　//&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;用于添加相关的Handler&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　服务端简单的代码，真的没有办法在精简了感觉。就是一个绑定端口操作。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2创建和实现HelloServerInitializer&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　在HelloServer中的HelloServerInitializer在这里实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要明确我们到底是要做什么的。很简单。HelloWorld!。我们希望实现一个能够像服务端发送文字的功能。服务端假如可以最好还能返回点消息给客户端，然客户端去显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　需求简单。那我们下面就准备开始实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　DelimiterBasedFrameDecoder Netty在官方网站上提供的示例显示 有这么一个解码器可以简单的消息分割。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其次 在decoder里面我们找到了String解码编码器。着都是官网提供给我们的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 以(&quot;\n&quot;)为结尾分割的 解码器&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 字符串解码 和 编码&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 自己的逻辑Handler&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　上面的三个解码和编码都是系统。&lt;/p&gt;
&lt;p&gt;　　另外我们自己的Handler怎么办呢。在最后我们添加一个自己的Handler用于写自己的处理逻辑。&lt;/p&gt;
&lt;h3&gt;2.3 增加自己的逻辑HelloServerHandler&lt;/h3&gt;
&lt;p&gt;　　自己的Handler我们这里先去继承extends官网推荐的SimpleChannelInboundHandler&amp;lt;C&amp;gt; 。在这里C，由于我们需求里面发送的是字符串。这里的C改写为String。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 收到消息直接打印输出&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;         System.out.println(ctx.channel().remoteAddress() + &quot; Say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 返回客户端消息 - 我已经接收到了你的消息&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         ctx.writeAndFlush(&quot;Received your message !\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * 覆盖 channelActive 方法 在channel被启用的时候触发 (在建立连接的时候)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * channelActive 和 channelInActive 在后面的内容中讲述，这里先不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         System.out.println(&quot;RamoteAddress : &quot; + ctx.channel().remoteAddress() + &quot; active !&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;         ctx.writeAndFlush( &quot;Welcome to &quot; + InetAddress.getLocalHost().getHostName() + &quot; service!\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　在channelHandlerContent自带一个writeAndFlush方法。方法的作用是写入Buffer并刷入。&lt;/p&gt;
&lt;p&gt;　　&lt;span style=&quot;color: #000000;&quot;&gt;注意:&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;在3.x版本中此处有很大区别。在3.x版本中write()方法是自动flush的。在4.x版本的前面几个版本也是一样的。但是在4.0.9之后修改为WriteAndFlush。普通的write方法将不会发送消息。需要手动在write之后flush()一次&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　这里channeActive的意思是当连接活跃(建立)的时候触发.输出消息源的远程地址。并返回欢迎消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　channelRead0 在这里的作用是类似于3.x版本的messageReceived()。可以当做是每一次收到消息是触发。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　我们在这里的代码是返回客户端一个字符串&quot;Received your message !&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;注意:字符串最后面的&quot;\n&quot;是必须的。因为我们在前面的解码器DelimiterBasedFrameDecoder是一个根据字符串结尾为&amp;ldquo;\n&amp;rdquo;来结尾的。假如没有这个字符的话。解码会出现问题。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;2.Client客户端&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　类似于服务端的代码。我们不做特别详细的解释。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　直接上示例代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.Channel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioSocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.BufferedReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.IOException;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.InputStreamReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClient {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; String host = &quot;127.0.0.1&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; port = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; args
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; InterruptedException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; IOException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;      &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException, IOException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         EventLoopGroup group = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;             Bootstrap b = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            b.group(group)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;             .channel(NioSocketChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;             .handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientInitializer());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 连接服务端&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;             Channel ch =&lt;span style=&quot;color: #000000;&quot;&gt; b.connect(host, port).sync().channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制台输入&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             BufferedReader in = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InputStreamReader(System.in));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (;;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 String line =&lt;span style=&quot;color: #000000;&quot;&gt; in.readLine();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (line == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;continue&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;                 &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 向服务端发送在控制台输入的文本 并用&quot;\r\n&quot;结尾
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 之所以用\r\n结尾 是因为我们在handler中添加了 DelimiterBasedFrameDecoder 帧解码。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 这个解码器是一个根据\n符号位分隔符的解码器。所以每条消息的最后必须加上\n否则无法识别和解码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;                 ch.writeAndFlush(line + &quot;\r\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;         } &lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; The connection is closed automatically on shutdown.&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            group.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　下面的是HelloClientInitializer代码貌似是和服务端的完全一样。我没注意看。其实编码和解码是相对的。多以服务端和客户端都是解码和编码。才能通信。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 这个地方的 必须和服务端对应上。否则无法正常解码和编码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 解码和编码 我将会在下一张为大家详细的讲解。再次暂时不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 客户端的逻辑&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　HellClientHandler：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         System.out.println(&quot;Server say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         System.out.println(&quot;Client active &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelInactive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         System.out.println(&quot;Client close &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelInactive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;本教程的示例源代码:&lt;a href=&quot;http://pan.baidu.com/s/1hABzK#dir&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1hABzK#dir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以再我的百度云盘里面找到。&lt;/p&gt;
&lt;p&gt;下面上几张成果图:&lt;/p&gt;
&lt;p&gt;　　客户端在连接建立是输出了Client active 信息，并收到服务端返回的Welcome消息。&lt;/p&gt;
&lt;p&gt;　　输入Hello World ! 回车发送消息。服务端响应返回消息已接受。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/27085946-6196642a22534635874adba84ac6e51a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;1.客户端控制台截图&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/359548/201312/27090204-1d36617bee2441849eebdd52b06ef8e3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;2.服务端控制台截图&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2014-08-12</pubDate>
        <link>https://github.com/TinyZzh//netty/2014/08/12/Netty4.x_6.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2014/08/12/Netty4.x_6.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(五) 编解码器Codec</title>
        <description>&lt;p&gt;　　在中国程序界。我们都是学着Hello World !慢慢成长起来的。逐渐从一无所知到熟悉精通的。&lt;/p&gt;
&lt;p&gt;　　第二章就从Hello World 开始讲述Netty的中文教程。&lt;/p&gt;
&lt;p&gt;　　首先创建一个Java项目。引入一个Netty 框架的包。这个步骤我在本系列教程的后面就不在重复了。&lt;/p&gt;
&lt;p&gt;　　先上一张我示例的项目工程图给大家看一下:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171451-184e0b3b4ce745de81d773c097243960.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;1.下载并为项目添加Netty框架&lt;/h2&gt;
&lt;p&gt;　　Netty的包大家可以从Netty官网:&lt;a href=&quot;http://netty.io/downloads.html&quot; target=&quot;_blank&quot;&gt;http://netty.io/downloads.html&lt;/a&gt;&amp;nbsp;下载&lt;/p&gt;
&lt;p&gt;　　&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171717-5926ec582cab4167b6aca539d8c8adff.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示: Netty提供了三个主要版本的框架包给大家下载。&lt;/p&gt;
&lt;p&gt;3.9版本Final 说明这个版本是3.x版本中最新的版本。final意味着功能不再继续添加更新。仅为修改bug等提供继续的更新。&lt;/p&gt;
&lt;p&gt;5.x版本由于是开始。不能排除是否稳定运行等问题。加上5.x在4.x的版本上略微修改的。在5.x稳定之前。不推荐大家学习使用。&lt;/p&gt;
&lt;p&gt;本教程是基于Netty4.x版本的。&lt;/p&gt;
&lt;p&gt;　　笔者也是从3.6版本，经过了相当痛苦的一段时间才算是真正的过度到4.x版本。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26172210-783e94446ac0417fab5493bb6dcdf526.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;　　下载之后解压缩。大家可以看到这样一个目录结构。非常的清晰。&lt;/p&gt;
&lt;p&gt;　　第一个文件夹jar是jar包的文件夹。第二个javadoc是API文档。第三个license文件夹是开源的授权文件(可以直接无视)。&lt;/p&gt;
&lt;p&gt;　　javadoc文件夹下面是一个jar包。可以直接解压缩出来。解压缩之后的文件夹就是api文档(以网页的形势展现)。&lt;/p&gt;
&lt;p&gt;　　jar文件夹里面有很多的jar包和一个all-in-one文件夹。都是Netty框架的组成部分。all-in-one里面有两个文件一个是jar包，另一个是对应的source源代码包。这样做的目的是为了给程序员有选择的添加自己所需要的包。&lt;/p&gt;
&lt;p&gt;　　假如读者是初学者的话。推荐直接套用all-in-one里面的jar包。假如你熟悉Netty的话可以根据自己的项目需求添加不同的jar包。&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;2.创建Server 服务端&lt;/h2&gt;
&lt;p&gt;　　Netty创建全部都是实现自&lt;a title=&quot;class in io.netty.bootstrap&quot; href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/AbstractBootstrap.html&quot; target=&quot;classFrame&quot;&gt;AbstractBootstrap&lt;/a&gt;。客户端的是Bootstrap，服务端的则是ServerBootstrap。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.1创建一个 HelloServer &lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;


&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.ServerBootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelFuture;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioServerSocketChannel;

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServer {

    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
     * 服务端监听的端口地址
     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; portNumber = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
        EventLoopGroup bossGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        EventLoopGroup workerGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            ServerBootstrap b &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ServerBootstrap();
            b.group(bossGroup, workerGroup);
            b.channel(NioServerSocketChannel.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
            b.childHandler(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerInitializer());

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 服务器绑定端口监听&lt;/span&gt;
            ChannelFuture f =&lt;span style=&quot;color: #000000;&quot;&gt; b.bind(portNumber).sync();
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听服务器关闭监听&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;            f.channel().closeFuture().sync();

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 可以简写为&lt;/span&gt;
            &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; b.bind(portNumber).sync().channel().closeFuture().sync(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　EventLoopGroup 是在4.x版本中提出来的一个新概念。用于channel的管理。服务端需要两个。和3.x版本一样，一个是boss线程一个是worker线程。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span&gt;　&lt;span style=&quot;color: #c0c0c0;&quot;&gt;　b.childHandler(&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;new HelloServerInitializer());　　　　//&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;用于添加相关的Handler&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　服务端简单的代码，真的没有办法在精简了感觉。就是一个绑定端口操作。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2创建和实现HelloServerInitializer&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　在HelloServer中的HelloServerInitializer在这里实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要明确我们到底是要做什么的。很简单。HelloWorld!。我们希望实现一个能够像服务端发送文字的功能。服务端假如可以最好还能返回点消息给客户端，然客户端去显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　需求简单。那我们下面就准备开始实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　DelimiterBasedFrameDecoder Netty在官方网站上提供的示例显示 有这么一个解码器可以简单的消息分割。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其次 在decoder里面我们找到了String解码编码器。着都是官网提供给我们的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 以(&quot;\n&quot;)为结尾分割的 解码器&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 字符串解码 和 编码&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 自己的逻辑Handler&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　上面的三个解码和编码都是系统。&lt;/p&gt;
&lt;p&gt;　　另外我们自己的Handler怎么办呢。在最后我们添加一个自己的Handler用于写自己的处理逻辑。&lt;/p&gt;
&lt;h3&gt;2.3 增加自己的逻辑HelloServerHandler&lt;/h3&gt;
&lt;p&gt;　　自己的Handler我们这里先去继承extends官网推荐的SimpleChannelInboundHandler&amp;lt;C&amp;gt; 。在这里C，由于我们需求里面发送的是字符串。这里的C改写为String。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 收到消息直接打印输出&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;         System.out.println(ctx.channel().remoteAddress() + &quot; Say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 返回客户端消息 - 我已经接收到了你的消息&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         ctx.writeAndFlush(&quot;Received your message !\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * 覆盖 channelActive 方法 在channel被启用的时候触发 (在建立连接的时候)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * channelActive 和 channelInActive 在后面的内容中讲述，这里先不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         System.out.println(&quot;RamoteAddress : &quot; + ctx.channel().remoteAddress() + &quot; active !&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;         ctx.writeAndFlush( &quot;Welcome to &quot; + InetAddress.getLocalHost().getHostName() + &quot; service!\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　在channelHandlerContent自带一个writeAndFlush方法。方法的作用是写入Buffer并刷入。&lt;/p&gt;
&lt;p&gt;　　&lt;span style=&quot;color: #000000;&quot;&gt;注意:&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;在3.x版本中此处有很大区别。在3.x版本中write()方法是自动flush的。在4.x版本的前面几个版本也是一样的。但是在4.0.9之后修改为WriteAndFlush。普通的write方法将不会发送消息。需要手动在write之后flush()一次&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　这里channeActive的意思是当连接活跃(建立)的时候触发.输出消息源的远程地址。并返回欢迎消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　channelRead0 在这里的作用是类似于3.x版本的messageReceived()。可以当做是每一次收到消息是触发。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　我们在这里的代码是返回客户端一个字符串&quot;Received your message !&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;注意:字符串最后面的&quot;\n&quot;是必须的。因为我们在前面的解码器DelimiterBasedFrameDecoder是一个根据字符串结尾为&amp;ldquo;\n&amp;rdquo;来结尾的。假如没有这个字符的话。解码会出现问题。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;2.Client客户端&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　类似于服务端的代码。我们不做特别详细的解释。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　直接上示例代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.Channel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioSocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.BufferedReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.IOException;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.InputStreamReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClient {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; String host = &quot;127.0.0.1&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; port = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; args
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; InterruptedException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; IOException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;      &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException, IOException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         EventLoopGroup group = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;             Bootstrap b = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            b.group(group)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;             .channel(NioSocketChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;             .handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientInitializer());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 连接服务端&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;             Channel ch =&lt;span style=&quot;color: #000000;&quot;&gt; b.connect(host, port).sync().channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制台输入&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             BufferedReader in = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InputStreamReader(System.in));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (;;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 String line =&lt;span style=&quot;color: #000000;&quot;&gt; in.readLine();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (line == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;continue&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;                 &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 向服务端发送在控制台输入的文本 并用&quot;\r\n&quot;结尾
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 之所以用\r\n结尾 是因为我们在handler中添加了 DelimiterBasedFrameDecoder 帧解码。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 这个解码器是一个根据\n符号位分隔符的解码器。所以每条消息的最后必须加上\n否则无法识别和解码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;                 ch.writeAndFlush(line + &quot;\r\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;         } &lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; The connection is closed automatically on shutdown.&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            group.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　下面的是HelloClientInitializer代码貌似是和服务端的完全一样。我没注意看。其实编码和解码是相对的。多以服务端和客户端都是解码和编码。才能通信。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 这个地方的 必须和服务端对应上。否则无法正常解码和编码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 解码和编码 我将会在下一张为大家详细的讲解。再次暂时不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 客户端的逻辑&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　HellClientHandler：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         System.out.println(&quot;Server say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         System.out.println(&quot;Client active &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelInactive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         System.out.println(&quot;Client close &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelInactive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;本教程的示例源代码:&lt;a href=&quot;http://pan.baidu.com/s/1hABzK#dir&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1hABzK#dir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以再我的百度云盘里面找到。&lt;/p&gt;
&lt;p&gt;下面上几张成果图:&lt;/p&gt;
&lt;p&gt;　　客户端在连接建立是输出了Client active 信息，并收到服务端返回的Welcome消息。&lt;/p&gt;
&lt;p&gt;　　输入Hello World ! 回车发送消息。服务端响应返回消息已接受。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/27085946-6196642a22534635874adba84ac6e51a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;1.客户端控制台截图&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/359548/201312/27090204-1d36617bee2441849eebdd52b06ef8e3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;2.服务端控制台截图&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2014-04-09</pubDate>
        <link>https://github.com/TinyZzh//netty/2014/04/09/Netty4.x_5.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2014/04/09/Netty4.x_5.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(四) ChannelHandler</title>
        <description>&lt;p&gt;　　在中国程序界。我们都是学着Hello World !慢慢成长起来的。逐渐从一无所知到熟悉精通的。&lt;/p&gt;
&lt;p&gt;　　第二章就从Hello World 开始讲述Netty的中文教程。&lt;/p&gt;
&lt;p&gt;　　首先创建一个Java项目。引入一个Netty 框架的包。这个步骤我在本系列教程的后面就不在重复了。&lt;/p&gt;
&lt;p&gt;　　先上一张我示例的项目工程图给大家看一下:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171451-184e0b3b4ce745de81d773c097243960.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;1.下载并为项目添加Netty框架&lt;/h2&gt;
&lt;p&gt;　　Netty的包大家可以从Netty官网:&lt;a href=&quot;http://netty.io/downloads.html&quot; target=&quot;_blank&quot;&gt;http://netty.io/downloads.html&lt;/a&gt;&amp;nbsp;下载&lt;/p&gt;
&lt;p&gt;　　&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171717-5926ec582cab4167b6aca539d8c8adff.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示: Netty提供了三个主要版本的框架包给大家下载。&lt;/p&gt;
&lt;p&gt;3.9版本Final 说明这个版本是3.x版本中最新的版本。final意味着功能不再继续添加更新。仅为修改bug等提供继续的更新。&lt;/p&gt;
&lt;p&gt;5.x版本由于是开始。不能排除是否稳定运行等问题。加上5.x在4.x的版本上略微修改的。在5.x稳定之前。不推荐大家学习使用。&lt;/p&gt;
&lt;p&gt;本教程是基于Netty4.x版本的。&lt;/p&gt;
&lt;p&gt;　　笔者也是从3.6版本，经过了相当痛苦的一段时间才算是真正的过度到4.x版本。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26172210-783e94446ac0417fab5493bb6dcdf526.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;　　下载之后解压缩。大家可以看到这样一个目录结构。非常的清晰。&lt;/p&gt;
&lt;p&gt;　　第一个文件夹jar是jar包的文件夹。第二个javadoc是API文档。第三个license文件夹是开源的授权文件(可以直接无视)。&lt;/p&gt;
&lt;p&gt;　　javadoc文件夹下面是一个jar包。可以直接解压缩出来。解压缩之后的文件夹就是api文档(以网页的形势展现)。&lt;/p&gt;
&lt;p&gt;　　jar文件夹里面有很多的jar包和一个all-in-one文件夹。都是Netty框架的组成部分。all-in-one里面有两个文件一个是jar包，另一个是对应的source源代码包。这样做的目的是为了给程序员有选择的添加自己所需要的包。&lt;/p&gt;
&lt;p&gt;　　假如读者是初学者的话。推荐直接套用all-in-one里面的jar包。假如你熟悉Netty的话可以根据自己的项目需求添加不同的jar包。&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;2.创建Server 服务端&lt;/h2&gt;
&lt;p&gt;　　Netty创建全部都是实现自&lt;a title=&quot;class in io.netty.bootstrap&quot; href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/AbstractBootstrap.html&quot; target=&quot;classFrame&quot;&gt;AbstractBootstrap&lt;/a&gt;。客户端的是Bootstrap，服务端的则是ServerBootstrap。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.1创建一个 HelloServer &lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;


&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.ServerBootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelFuture;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioServerSocketChannel;

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServer {

    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
     * 服务端监听的端口地址
     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; portNumber = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
        EventLoopGroup bossGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        EventLoopGroup workerGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            ServerBootstrap b &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ServerBootstrap();
            b.group(bossGroup, workerGroup);
            b.channel(NioServerSocketChannel.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
            b.childHandler(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerInitializer());

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 服务器绑定端口监听&lt;/span&gt;
            ChannelFuture f =&lt;span style=&quot;color: #000000;&quot;&gt; b.bind(portNumber).sync();
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听服务器关闭监听&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;            f.channel().closeFuture().sync();

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 可以简写为&lt;/span&gt;
            &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; b.bind(portNumber).sync().channel().closeFuture().sync(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　EventLoopGroup 是在4.x版本中提出来的一个新概念。用于channel的管理。服务端需要两个。和3.x版本一样，一个是boss线程一个是worker线程。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span&gt;　&lt;span style=&quot;color: #c0c0c0;&quot;&gt;　b.childHandler(&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;new HelloServerInitializer());　　　　//&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;用于添加相关的Handler&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　服务端简单的代码，真的没有办法在精简了感觉。就是一个绑定端口操作。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2创建和实现HelloServerInitializer&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　在HelloServer中的HelloServerInitializer在这里实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要明确我们到底是要做什么的。很简单。HelloWorld!。我们希望实现一个能够像服务端发送文字的功能。服务端假如可以最好还能返回点消息给客户端，然客户端去显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　需求简单。那我们下面就准备开始实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　DelimiterBasedFrameDecoder Netty在官方网站上提供的示例显示 有这么一个解码器可以简单的消息分割。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其次 在decoder里面我们找到了String解码编码器。着都是官网提供给我们的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 以(&quot;\n&quot;)为结尾分割的 解码器&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 字符串解码 和 编码&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 自己的逻辑Handler&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　上面的三个解码和编码都是系统。&lt;/p&gt;
&lt;p&gt;　　另外我们自己的Handler怎么办呢。在最后我们添加一个自己的Handler用于写自己的处理逻辑。&lt;/p&gt;
&lt;h3&gt;2.3 增加自己的逻辑HelloServerHandler&lt;/h3&gt;
&lt;p&gt;　　自己的Handler我们这里先去继承extends官网推荐的SimpleChannelInboundHandler&amp;lt;C&amp;gt; 。在这里C，由于我们需求里面发送的是字符串。这里的C改写为String。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 收到消息直接打印输出&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;         System.out.println(ctx.channel().remoteAddress() + &quot; Say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 返回客户端消息 - 我已经接收到了你的消息&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         ctx.writeAndFlush(&quot;Received your message !\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * 覆盖 channelActive 方法 在channel被启用的时候触发 (在建立连接的时候)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * channelActive 和 channelInActive 在后面的内容中讲述，这里先不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         System.out.println(&quot;RamoteAddress : &quot; + ctx.channel().remoteAddress() + &quot; active !&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;         ctx.writeAndFlush( &quot;Welcome to &quot; + InetAddress.getLocalHost().getHostName() + &quot; service!\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　在channelHandlerContent自带一个writeAndFlush方法。方法的作用是写入Buffer并刷入。&lt;/p&gt;
&lt;p&gt;　　&lt;span style=&quot;color: #000000;&quot;&gt;注意:&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;在3.x版本中此处有很大区别。在3.x版本中write()方法是自动flush的。在4.x版本的前面几个版本也是一样的。但是在4.0.9之后修改为WriteAndFlush。普通的write方法将不会发送消息。需要手动在write之后flush()一次&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　这里channeActive的意思是当连接活跃(建立)的时候触发.输出消息源的远程地址。并返回欢迎消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　channelRead0 在这里的作用是类似于3.x版本的messageReceived()。可以当做是每一次收到消息是触发。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　我们在这里的代码是返回客户端一个字符串&quot;Received your message !&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;注意:字符串最后面的&quot;\n&quot;是必须的。因为我们在前面的解码器DelimiterBasedFrameDecoder是一个根据字符串结尾为&amp;ldquo;\n&amp;rdquo;来结尾的。假如没有这个字符的话。解码会出现问题。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;2.Client客户端&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　类似于服务端的代码。我们不做特别详细的解释。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　直接上示例代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.Channel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioSocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.BufferedReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.IOException;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.InputStreamReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClient {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; String host = &quot;127.0.0.1&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; port = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; args
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; InterruptedException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; IOException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;      &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException, IOException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         EventLoopGroup group = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;             Bootstrap b = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            b.group(group)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;             .channel(NioSocketChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;             .handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientInitializer());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 连接服务端&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;             Channel ch =&lt;span style=&quot;color: #000000;&quot;&gt; b.connect(host, port).sync().channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制台输入&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             BufferedReader in = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InputStreamReader(System.in));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (;;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 String line =&lt;span style=&quot;color: #000000;&quot;&gt; in.readLine();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (line == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;continue&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;                 &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 向服务端发送在控制台输入的文本 并用&quot;\r\n&quot;结尾
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 之所以用\r\n结尾 是因为我们在handler中添加了 DelimiterBasedFrameDecoder 帧解码。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 这个解码器是一个根据\n符号位分隔符的解码器。所以每条消息的最后必须加上\n否则无法识别和解码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;                 ch.writeAndFlush(line + &quot;\r\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;         } &lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; The connection is closed automatically on shutdown.&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            group.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　下面的是HelloClientInitializer代码貌似是和服务端的完全一样。我没注意看。其实编码和解码是相对的。多以服务端和客户端都是解码和编码。才能通信。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 这个地方的 必须和服务端对应上。否则无法正常解码和编码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 解码和编码 我将会在下一张为大家详细的讲解。再次暂时不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 客户端的逻辑&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　HellClientHandler：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         System.out.println(&quot;Server say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         System.out.println(&quot;Client active &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelInactive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         System.out.println(&quot;Client close &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelInactive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;本教程的示例源代码:&lt;a href=&quot;http://pan.baidu.com/s/1hABzK#dir&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1hABzK#dir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以再我的百度云盘里面找到。&lt;/p&gt;
&lt;p&gt;下面上几张成果图:&lt;/p&gt;
&lt;p&gt;　　客户端在连接建立是输出了Client active 信息，并收到服务端返回的Welcome消息。&lt;/p&gt;
&lt;p&gt;　　输入Hello World ! 回车发送消息。服务端响应返回消息已接受。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/27085946-6196642a22534635874adba84ac6e51a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;1.客户端控制台截图&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/359548/201312/27090204-1d36617bee2441849eebdd52b06ef8e3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;2.服务端控制台截图&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2014-01-15</pubDate>
        <link>https://github.com/TinyZzh//netty/2014/01/15/Netty4.x_4.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2014/01/15/Netty4.x_4.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(三) Hello World ！详解</title>
        <description>&lt;h1 align=&quot;center&quot;&gt;Netty 中文教程 （二） Hello World ！详解&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上一篇文章，笔者提供了一个Hello World 的Netty示例。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 时间过去了这么久，准备解释一下示例代码。&lt;/p&gt;
&lt;h2&gt;1.HelloServer 详解&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; HelloServer首先定义了一个静态终态的变量---服务端绑定端口7878。至于为什么是这个7878端口，纯粹是笔者个人喜好。大家可以按照自己的习惯选择端口。当然了。常用的几个端口(例如:80,8080,843(Flash及Silverlight策略文件请求端口等等)，3306(Mysql数据库占用端口))最好就不要占用了，避免一些奇怪的问题。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; HelloServer类里面的代码并不多。只有一个main函数，加上内部短短的几行代码。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Main函数开始的位置定义了两个工作线程，一个命名为WorkerGroup，另一个命名为BossGroup。都是实例化NioEventLoopGroup。这一点和3.x版本中基本思路是一致的。Worker线程用于管理线程为Boss线程服务。&lt;/p&gt;
&lt;p&gt;讲到这里需要解释一下EventLoopGroup，它是4.x版本提出来的一个新概念。类似于3.x版本中的线程。用于管理Channel连接的。在main函数的结尾就用到了EventLoopGroup提供的便捷的方法，shutdownGraceFully()，翻译为中文就是优雅的全部关闭。感觉是不是很有意思。作者居然会如此可爱的命名了这样一个函数。查看相应的源代码。我们可以在DefaultEventExecutorGroup的父类MultithreadEventExecutorGroup中看到它的实现代码。关闭了全部EventExecutor数组child里面子元素。相比于3.x版本这是一个比较重大的改动。开发者可以很轻松的全部关闭，而不需要担心出现内存泄露。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在try里面实例化一个ServerBootstrap b。设置group。设置channel为NioServerSocketChannel。&lt;/p&gt;
&lt;p&gt;设置childHandler，在这里使用实例化一个HelloServerInitializer类来实现，继承ChannelInitializer&amp;lt;SocketChannel&amp;gt;。内部的代码我们可以在前文的注视中大致了解一下，主要作用是设置相关的字节解码编码器，和代码处理逻辑。Handler是Netty包里面占很大一个比例。可见其的作用和用途。Handler涉及很多领域。HTTP，UDP，Socket，WebSocket等等。详细的部分在本章的第三节解释。&lt;/p&gt;
&lt;p&gt;设置好Handler绑定端口7878，并调用函数sync()，监听端口(等待客户端连接和发送消息)。并监听端口关闭(为了防止线程停止)。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后finally我们要优雅的全部关闭服务端。^_^&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;2.HelloClient详解&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 相比于服务端的代码。客户端要精简一些。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 客户端仅仅只需要一个worker的EventLoopGroup。其次是类似于ServerBootstrap的HandlerInitializer。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 唯一不同的可能就是客户端的connect方法。服务端的绑定并监听端口，客户端是连接指定的地址。Sync().channel()是为了返回这个连接服务端的channel，并用于后面代码的调用。&lt;/p&gt;
&lt;p&gt;BufferedReader 这个是用于控制台输入的。不做详细的解释了就。大家都懂的。&lt;/p&gt;
&lt;p&gt;当用户输入一行内容并回车之后。循环的读取每一行内容。然后使用writeAndFlush向服务端发送消息。&lt;/p&gt;
&lt;h2&gt;3.HandlerInitializer详解&lt;/h2&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Handler在Netty中是一个比较重要的概念。有着相当重要的作用。相比于Netty的底层。我们接触更多的应该是他的Handler。在这里我将它剥离出来单独解释。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ServerHandlerInitializer继承与ChannelInitializer&amp;lt;SocketChannel&amp;gt;需要我们实现一个initChannel()方法。我们定义的handler就是写在这里面。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在最开始的地方定义了一个DelimiterBasedFrameDecoder。按直接翻译就是基于分隔符的帧解码器。再一次感觉框架的作者的命名，好直接好简单。详细的内容我们在后面的文章中在为大家详细的解释。目前大家知道他是以分隔符为分割标准的解码器就好了。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 也许有人会问分隔符是什么？我只能 !*_* :&amp;ldquo;纳尼 ！！&amp;rdquo;。分隔符其实就是&amp;ldquo;\n&amp;rdquo;我们在学习C语言的时候最常用的的也许就是这个分隔符了吧。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面的则是StringDecoder 和StringEncoder。字符串解码器和字符串编码器。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后面则是我们自己的逻辑。服务/客户端逻辑是在消息解码之后处理的。然后服务/客户端返回相关消息则是需要对消息进行相对应的编码。最终才是以二进制数据流的形势发送给服务/客户端的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 内容暂时就写到这里。O(&amp;cap;_&amp;cap;)O哈哈~。后面的东西慢慢为大家完善。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 假如有甚么不正确的地方，敬请谅解。求大神指正。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2014-01-06</pubDate>
        <link>https://github.com/TinyZzh//netty/2014/01/06/Netty4.x_3.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2014/01/06/Netty4.x_3.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(二) Hello World !</title>
        <description>&lt;p&gt;　　在中国程序界。我们都是学着Hello World !慢慢成长起来的。逐渐从一无所知到熟悉精通的。&lt;/p&gt;
&lt;p&gt;　　第二章就从Hello World 开始讲述Netty的中文教程。&lt;/p&gt;
&lt;p&gt;　　首先创建一个Java项目。引入一个Netty 框架的包。这个步骤我在本系列教程的后面就不在重复了。&lt;/p&gt;
&lt;p&gt;　　先上一张我示例的项目工程图给大家看一下:&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171451-184e0b3b4ce745de81d773c097243960.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;1.下载并为项目添加Netty框架&lt;/h2&gt;
&lt;p&gt;　　Netty的包大家可以从Netty官网:&lt;a href=&quot;http://netty.io/downloads.html&quot; target=&quot;_blank&quot;&gt;http://netty.io/downloads.html&lt;/a&gt;&amp;nbsp;下载&lt;/p&gt;
&lt;p&gt;　　&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26171717-5926ec582cab4167b6aca539d8c8adff.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示: Netty提供了三个主要版本的框架包给大家下载。&lt;/p&gt;
&lt;p&gt;3.9版本Final 说明这个版本是3.x版本中最新的版本。final意味着功能不再继续添加更新。仅为修改bug等提供继续的更新。&lt;/p&gt;
&lt;p&gt;5.x版本由于是开始。不能排除是否稳定运行等问题。加上5.x在4.x的版本上略微修改的。在5.x稳定之前。不推荐大家学习使用。&lt;/p&gt;
&lt;p&gt;本教程是基于Netty4.x版本的。&lt;/p&gt;
&lt;p&gt;　　笔者也是从3.6版本，经过了相当痛苦的一段时间才算是真正的过度到4.x版本。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/26172210-783e94446ac0417fab5493bb6dcdf526.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;　　下载之后解压缩。大家可以看到这样一个目录结构。非常的清晰。&lt;/p&gt;
&lt;p&gt;　　第一个文件夹jar是jar包的文件夹。第二个javadoc是API文档。第三个license文件夹是开源的授权文件(可以直接无视)。&lt;/p&gt;
&lt;p&gt;　　javadoc文件夹下面是一个jar包。可以直接解压缩出来。解压缩之后的文件夹就是api文档(以网页的形势展现)。&lt;/p&gt;
&lt;p&gt;　　jar文件夹里面有很多的jar包和一个all-in-one文件夹。都是Netty框架的组成部分。all-in-one里面有两个文件一个是jar包，另一个是对应的source源代码包。这样做的目的是为了给程序员有选择的添加自己所需要的包。&lt;/p&gt;
&lt;p&gt;　　假如读者是初学者的话。推荐直接套用all-in-one里面的jar包。假如你熟悉Netty的话可以根据自己的项目需求添加不同的jar包。&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;2.创建Server 服务端&lt;/h2&gt;
&lt;p&gt;　　Netty创建全部都是实现自&lt;a title=&quot;class in io.netty.bootstrap&quot; href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/AbstractBootstrap.html&quot; target=&quot;classFrame&quot;&gt;AbstractBootstrap&lt;/a&gt;。客户端的是Bootstrap，服务端的则是ServerBootstrap。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.1创建一个 HelloServer &lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;


&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.ServerBootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelFuture;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioServerSocketChannel;

&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServer {

    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;
     * 服务端监听的端口地址
     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; portNumber = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;

    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException {
        EventLoopGroup bossGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        EventLoopGroup workerGroup &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            ServerBootstrap b &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ServerBootstrap();
            b.group(bossGroup, workerGroup);
            b.channel(NioServerSocketChannel.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);
            b.childHandler(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerInitializer());

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 服务器绑定端口监听&lt;/span&gt;
            ChannelFuture f =&lt;span style=&quot;color: #000000;&quot;&gt; b.bind(portNumber).sync();
            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 监听服务器关闭监听&lt;/span&gt;
&lt;span style=&quot;color: #000000;&quot;&gt;            f.channel().closeFuture().sync();

            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 可以简写为&lt;/span&gt;
            &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; b.bind(portNumber).sync().channel().closeFuture().sync(); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;
        } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }
}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　EventLoopGroup 是在4.x版本中提出来的一个新概念。用于channel的管理。服务端需要两个。和3.x版本一样，一个是boss线程一个是worker线程。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span&gt;　&lt;span style=&quot;color: #c0c0c0;&quot;&gt;　b.childHandler(&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;new HelloServerInitializer());　　　　//&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;用于添加相关的Handler&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　服务端简单的代码，真的没有办法在精简了感觉。就是一个绑定端口操作。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2.2创建和实现HelloServerInitializer&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　在HelloServer中的HelloServerInitializer在这里实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们需要明确我们到底是要做什么的。很简单。HelloWorld!。我们希望实现一个能够像服务端发送文字的功能。服务端假如可以最好还能返回点消息给客户端，然客户端去显示。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　需求简单。那我们下面就准备开始实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　DelimiterBasedFrameDecoder Netty在官方网站上提供的示例显示 有这么一个解码器可以简单的消息分割。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其次 在decoder里面我们找到了String解码编码器。着都是官网提供给我们的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 以(&quot;\n&quot;)为结尾分割的 解码器&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 字符串解码 和 编码&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 自己的逻辑Handler&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloServerHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　上面的三个解码和编码都是系统。&lt;/p&gt;
&lt;p&gt;　　另外我们自己的Handler怎么办呢。在最后我们添加一个自己的Handler用于写自己的处理逻辑。&lt;/p&gt;
&lt;h3&gt;2.3 增加自己的逻辑HelloServerHandler&lt;/h3&gt;
&lt;p&gt;　　自己的Handler我们这里先去继承extends官网推荐的SimpleChannelInboundHandler&amp;lt;C&amp;gt; 。在这里C，由于我们需求里面发送的是字符串。这里的C改写为String。&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.net.InetAddress;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloServerHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 收到消息直接打印输出&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;         System.out.println(ctx.channel().remoteAddress() + &quot; Say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 返回客户端消息 - 我已经接收到了你的消息&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         ctx.writeAndFlush(&quot;Received your message !\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * 覆盖 channelActive 方法 在channel被启用的时候触发 (在建立连接的时候)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * channelActive 和 channelInActive 在后面的内容中讲述，这里先不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         System.out.println(&quot;RamoteAddress : &quot; + ctx.channel().remoteAddress() + &quot; active !&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;         ctx.writeAndFlush( &quot;Welcome to &quot; + InetAddress.getLocalHost().getHostName() + &quot; service!\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　在channelHandlerContent自带一个writeAndFlush方法。方法的作用是写入Buffer并刷入。&lt;/p&gt;
&lt;p&gt;　　&lt;span style=&quot;color: #000000;&quot;&gt;注意:&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;在3.x版本中此处有很大区别。在3.x版本中write()方法是自动flush的。在4.x版本的前面几个版本也是一样的。但是在4.0.9之后修改为WriteAndFlush。普通的write方法将不会发送消息。需要手动在write之后flush()一次&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　这里channeActive的意思是当连接活跃(建立)的时候触发.输出消息源的远程地址。并返回欢迎消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　channelRead0 在这里的作用是类似于3.x版本的messageReceived()。可以当做是每一次收到消息是触发。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　我们在这里的代码是返回客户端一个字符串&quot;Received your message !&quot;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;注意:字符串最后面的&quot;\n&quot;是必须的。因为我们在前面的解码器DelimiterBasedFrameDecoder是一个根据字符串结尾为&amp;ldquo;\n&amp;rdquo;来结尾的。假如没有这个字符的话。解码会出现问题。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;2.Client客户端&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　类似于服务端的代码。我们不做特别详细的解释。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　直接上示例代码:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.bootstrap.Bootstrap;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.Channel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.EventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.nio.NioEventLoopGroup;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.nio.NioSocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.BufferedReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.IOException;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; java.io.InputStreamReader;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClient {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; String host = &quot;127.0.0.1&quot;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; port = 7878&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt;     &lt;span style=&quot;color: #008000;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@param&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; args
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; InterruptedException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color: #808080;&quot;&gt;@throws&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; IOException
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;      &lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InterruptedException, IOException {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         EventLoopGroup group = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; NioEventLoopGroup();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;try&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;             Bootstrap b = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Bootstrap();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            b.group(group)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;             .channel(NioSocketChannel.&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt;             .handler(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientInitializer());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;31&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 连接服务端&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;32&lt;/span&gt;             Channel ch =&lt;span style=&quot;color: #000000;&quot;&gt; b.connect(host, port).sync().channel();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;33&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;34&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制台输入&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;35&lt;/span&gt;             BufferedReader in = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; InputStreamReader(System.in));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;36&lt;/span&gt;             &lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (;;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;37&lt;/span&gt;                 String line =&lt;span style=&quot;color: #000000;&quot;&gt; in.readLine();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;38&lt;/span&gt;                 &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (line == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;39&lt;/span&gt;                     &lt;span style=&quot;color: #0000ff;&quot;&gt;continue&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;40&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;                }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;41&lt;/span&gt;                 &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;42&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 向服务端发送在控制台输入的文本 并用&quot;\r\n&quot;结尾
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;43&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 之所以用\r\n结尾 是因为我们在handler中添加了 DelimiterBasedFrameDecoder 帧解码。
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;44&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * 这个解码器是一个根据\n符号位分隔符的解码器。所以每条消息的最后必须加上\n否则无法识别和解码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;45&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;                 * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;46&lt;/span&gt;                 ch.writeAndFlush(line + &quot;\r\n&quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;47&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;48&lt;/span&gt;         } &lt;span style=&quot;color: #0000ff;&quot;&gt;finally&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;49&lt;/span&gt;             &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; The connection is closed automatically on shutdown.&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;50&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;            group.shutdownGracefully();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;51&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;        }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;52&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;53&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　下面的是HelloClientInitializer代码貌似是和服务端的完全一样。我没注意看。其实编码和解码是相对的。多以服务端和客户端都是解码和编码。才能通信。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #c0c0c0;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelInitializer;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelPipeline;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.socket.SocketChannel;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.DelimiterBasedFrameDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.Delimiters;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringDecoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.handler.codec.string.StringEncoder;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientInitializer &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; initChannel(SocketChannel ch) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;         ChannelPipeline pipeline =&lt;span style=&quot;color: #000000;&quot;&gt; ch.pipeline();
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 这个地方的 必须和服务端对应上。否则无法正常解码和编码
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * 解码和编码 我将会在下一张为大家详细的讲解。再次暂时不做详细的描述
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         *
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt; &lt;span style=&quot;color: #008000;&quot;&gt;         * &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         pipeline.addLast(&quot;framer&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; DelimiterBasedFrameDecoder(8192&lt;span style=&quot;color: #000000;&quot;&gt;, Delimiters.lineDelimiter()));
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt;         pipeline.addLast(&quot;decoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringDecoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt;         pipeline.addLast(&quot;encoder&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; StringEncoder());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;26&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;27&lt;/span&gt;         &lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 客户端的逻辑&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;28&lt;/span&gt;         pipeline.addLast(&quot;handler&quot;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HelloClientHandler());
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;29&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;30&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　HellClientHandler：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;package&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; org.example.hello;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.ChannelHandlerContext;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; io.netty.channel.SimpleChannelInboundHandler;
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 5&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 6&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt; HelloClientHandler &lt;span style=&quot;color: #0000ff;&quot;&gt;extends&lt;/span&gt; SimpleChannelInboundHandler&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt; 8&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt; 9&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelRead0(ChannelHandlerContext ctx, String msg) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;11&lt;/span&gt;         System.out.println(&quot;Server say : &quot; +&lt;span style=&quot;color: #000000;&quot;&gt; msg);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;12&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;14&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;15&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelActive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;16&lt;/span&gt;         System.out.println(&quot;Client active &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;17&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelActive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;18&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: #008080;&quot;&gt;20&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    @Override
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;21&lt;/span&gt;     &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; channelInactive(ChannelHandlerContext ctx) &lt;span style=&quot;color: #0000ff;&quot;&gt;throws&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Exception {
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;22&lt;/span&gt;         System.out.println(&quot;Client close &quot;&lt;span style=&quot;color: #000000;&quot;&gt;);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;23&lt;/span&gt;         &lt;span style=&quot;color: #0000ff;&quot;&gt;super&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.channelInactive(ctx);
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;24&lt;/span&gt; &lt;span style=&quot;color: #000000;&quot;&gt;    }
&lt;/span&gt;&lt;span style=&quot;color: #008080;&quot;&gt;25&lt;/span&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;本教程的示例源代码:&lt;a href=&quot;http://pan.baidu.com/s/1hABzK#dir&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1hABzK#dir&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以再我的百度云盘里面找到。&lt;/p&gt;
&lt;p&gt;下面上几张成果图:&lt;/p&gt;
&lt;p&gt;　　客户端在连接建立是输出了Client active 信息，并收到服务端返回的Welcome消息。&lt;/p&gt;
&lt;p&gt;　　输入Hello World ! 回车发送消息。服务端响应返回消息已接受。&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; src=&quot;http://images.cnitblog.com/blog/359548/201312/27085946-6196642a22534635874adba84ac6e51a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;1.客户端控制台截图&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/359548/201312/27090204-1d36617bee2441849eebdd52b06ef8e3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;2.服务端控制台截图&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2013-12-26</pubDate>
        <link>https://github.com/TinyZzh//netty/2013/12/26/Netty4.x_2.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2013/12/26/Netty4.x_2.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
      <item>
        <title>Netty4.x中文教程系列(一) 目录及概述</title>
        <description>&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Netty 提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Netty是一个NIO客户端 服务端框架。允许快速简单的开发网络应用程序。例如：服务端和客户端之间的协议。它最棒的地方在于简化了网络编程规范。例如:TCP和UDP socket服务。&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;Netty官网:&lt;a href=&quot;http://Netty.io&quot;&gt;Netty.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　笔者个人理解：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 　　Netty本身是用于快速构建服务端与客户端之间通信协议的框架。Netty在消息处理上使用责任链模式，用户可以轻松方便的对它进行扩展。官方也提供了大量的优秀的扩展。&lt;/p&gt;
&lt;p&gt;　　本系列主要讲的内容将是Netty的一些基础概念和一些应用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ps：博客内容若有错误，还望各位大神指正。&lt;/p&gt;
&lt;h1 style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;&lt;strong&gt;教程目录&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;1.&lt;a class=&quot;titlelink&quot; href=&quot;http://www.cnblogs.com/zou90512/p/3492287.html&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;Netty4.x中文教程系列(一)&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;2.&lt;a class=&quot;titlelink&quot; href=&quot;http://www.cnblogs.com/zou90512/p/3492878.html&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;Netty4.x中文教程系列(二) Hello World !&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;3.&lt;a class=&quot;titlelink&quot; href=&quot;http://www.cnblogs.com/zou90512/p/3507729.html&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;Netty4.x中文教程系列(三) Hello World ！详解&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;4.&lt;a class=&quot;titlelink&quot; href=&quot;http://www.cnblogs.com/zou90512/p/3521250.html&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;Netty4.x中文教程系列(四) ChannelHandler&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;5.&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/zou90512/p/3654163.html&quot; target=&quot;_blank&quot;&gt;Netty4.x中文教程系列(五)&amp;nbsp;编解码器Codec&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;&lt;span style=&quot;color: #00ccff;&quot;&gt;6.&lt;a href=&quot;http://www.cnblogs.com/zou90512/p/3908022.html&quot; target=&quot;_blank&quot;&gt;Netty4.x中文教程系列(六) 从头开始Bootstrap&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h1 style=&quot;text-align: center;&quot;&gt;教程相关代码和文档&amp;nbsp;&lt;/h1&gt;
&lt;p&gt;百度云盘：&lt;a href=&quot;http://pan.baidu.com/s/1pJsKEAR&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1pJsKEAR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; font-family: 微软雅黑; font-size: 12px; border: #e0e0e0 1px dashed;&quot;&gt;&lt;strong&gt;作者&lt;/strong&gt;：TinyZ&lt;br /&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/zou90512/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/zou90512/&lt;/a&gt;&lt;br /&gt;关于作者：努力学习，天天向上。不断探索学习，提升自身价值。记录经验分享。&lt;br /&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接&lt;br /&gt;如有问题，可以通过&amp;nbsp;&lt;span style=&quot;color: #0000ff;&quot;&gt;zou90512@126.com&amp;nbsp;&lt;/span&gt;联系我，非常感谢。&lt;br /&gt;笔者网店: &lt;a href=&quot;http://aoleitaisen.taobao.com&quot; target=&quot;_blank&quot;&gt;http://aoleitaisen.taobao.com&lt;/a&gt;. 欢迎广大读者围观&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;</description>
        <pubDate>2013-12-26</pubDate>
        <link>https://github.com/TinyZzh//netty/2013/12/26/Netty4.x_1.html</link>
        <guid isPermaLink="true">https://github.com/TinyZzh//netty/2013/12/26/Netty4.x_1.html</guid>
        
        <category>Netty4.x中文教程系列</category>
        
        
        <category>Netty</category>
        
      </item>
    
  </channel>
</rss>
